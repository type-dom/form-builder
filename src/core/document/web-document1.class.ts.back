import { fromEvent } from 'rxjs';
import { TypeDiv } from '../../web-component/div-component/div-component.class';
import { WebLayout } from '../../layout/layout.class';
import { BodyMainContent } from '../../layout/body/main-content/main-content';
import { WebTextNode } from '../../web-text-node/web-text-node.class';
import { Division } from '../../web-element/division/division.class';
import { Input } from '../../web-element/input/input.class';
import { Span } from '../../web-element/span/span.class';
import { Button } from '../../web-element/button/button.class';
import { TypeElement } from '../../web-element/web-element.class';
import { WebPage } from '../web-page/web-page.class';
import { IWebPage } from '../web-page/web-page.interface';
import { IWebDocument } from './web-document1.interface';
import { WebDocumentContents } from './contents/contents.class';
import { WebDocumentTabs } from './tabs/tabs.class';
import { IOptionConfig } from '../controls/web-control.interface';
import { fieldConfig } from '../controls/web-control.const';

// todo 处理多页面问题
//    修改tab头部名称应该在属性中，或者双击选中时就可修改。
//    是否要新增页面属性？？？
//    多页面时，默认页面不应该清空
//    加载多页面时，要同步到 tab数量属性中。
export class WebDocument extends TypeDiv implements IWebDocument {
  className: 'WebDocument';
  // todo 这样的子元素类型是有问题的。要优化
  //      tabs contents
  //      tabs在设计模式下，在页面中可以增删。
  //      只有一个页面时， tabs隐藏，只显示唯一的contents.
  childNodes: (WebPage | Span | Input | Button | Division | WebDocumentContents | WebDocumentTabs)[];

  // 第一步：defaultPage 改造成数组 allPages；
  // 第二步：WebDocument里面写Tab样式；（nav等特殊元素采用虚拟dom写法），每个Tab的子页就是一个new WebPage(this)
  // 第三步：右边的Tab onChange 事件联动这里的Tab动态生成；
  // 第四步：Tab切换事件要能够触发切换当前的defaultPage；

  // enabledTab:false;
  currentPage?: WebPage; // 当前画板
  allPages: WebPage[]; // 所有的画板
  defaultPage: WebPage; // 原来的第一个画板
  tabHeaders: Division; // tab头部
  currentTabNameInput: Input;// 当前Tab命名
  currentHeaderElement?: HTMLElement;
  currentTabNameInputLabel: Span;
  setTabNameButton: Button;

  tabs: WebDocumentTabs;
  contents: WebDocumentContents;
  constructor(public parent: BodyMainContent | WebLayout) {
    super();
    this.className = 'WebDocument';
    this.propObj = {
      styleObj: {
        // display: Display.flex,
        // flexDirection: 'column',
        // // width: 'min-content',
        // minWidth: '500px',
        // maxHeight: 'calc(100vh - 40px)',
        // padding: '20px',
        // boxSizing: 'border-box',
        // margin: '0 auto',
        // transformOrigin: '50% 0',
        // // transform: 'scale(0.5)',
        // overflowY: 'auto',
      },
      attrObj: {
        name: 'document-content'
      }
    };
    this.defaultPage = new WebPage(this);
    this.allPages = [this.defaultPage];
    this.childNodes = this.allPages;
    this.currentPage = this.defaultPage;
    // this.editor.currentPage = this.allPages[0];
    this.tabHeaders = new Division(this);
    this.currentTabNameInput = new Input(this);
    this.currentTabNameInputLabel = new Span(this);
    this.setTabNameButton = new Button(this);

    this.tabs = new WebDocumentTabs(this);
    this.contents = new WebDocumentContents(this);
    this.fieldConfig = fieldConfig;
    // this.childNodes = [this.tabs, this.contents];
    this.initEvents();
  }

  get fieldConfig(): IOptionConfig | undefined {
    if (this.attrObj['field-config']) {
      return JSON.parse(this.attrObj['field-config'] as string);
    }
    return undefined;
  }
  set fieldConfig(config: IOptionConfig | undefined) {
    if (config === undefined) {
      this.removeAttribute('field-config');
    }
    this.setAttribute('field-config', JSON.stringify(config));
  }
  createInstance(docLiteral: IWebDocument): void {
    if (docLiteral.propObj) {
      this.setPropObj(docLiteral.propObj);
    }
    this.childNodes = [this.defaultPage];
    // childNodes后面四个不是 WebPage;
    if (docLiteral.childNodes.length - 4 > 1) {
      this.setTab(docLiteral.childNodes.length - 4);
    }

    // todo 处理tabs
    docLiteral.childNodes.forEach((page, index: number) => {
      // todo 多页面的处理
      if (index === 0) {
        this.defaultPage.createInstance(page as IWebPage);
      } else {
        if (page.className === 'WebPage') {
          (this.childNodes[index] as WebPage).createInstance(page);
          // this.appendChild(pageObj);
        } else if (page.className === 'Span') {
          if (this.editor.mode !== 'design') {
            this.currentTabNameInputLabel.hide();
            return;
          }
          (this.currentTabNameInputLabel.childNodes[0] as WebTextNode).setText((page.childNodes[0] as any).text);
          // span.createInstance(page);
          // this.appendChild(span);
        } else if (page.className === 'Input') {
          if (this.editor.mode !== 'design') {
            this.currentTabNameInput.hide();
            return;
          }
          this.currentTabNameInput.setAttrObj(page.propObj.attrObj);
        } else if (page.className === 'Button') {
          if (this.editor.mode !== 'design') {
            this.setTabNameButton.hide();
            return;
          }
          (this.setTabNameButton.childNodes[0] as WebTextNode).setText((page.childNodes[0] as any).text);
        } else if (page.className === 'Division') {
          if (this.editor.mode !== 'design') {
            this.tabHeaders.setStyleObj({
              top: '0',
            });
          }
          (this.tabHeaders.childNodes as Division[]).forEach((tab, index) => {
            (tab.childNodes[0] as WebTextNode).setText(((page.childNodes[index] as TypeElement).childNodes[0] as WebTextNode).text);
          });
        } else {
          console.error('error. ');
        }
      }
    });
    // 加载 tabHeaders 绑定的事件
    this.initEvents();
  }

  setTab(tabCount: number): void {
    // console.log('SetTab方法 新增了' + tabCount + 'Tab页面');
    let enabledTab = tabCount > 0;// 是否启用了Tab,需要传参数（tabCount>0）

    if (enabledTab) { // 启用了Tab
      let tabWebPages = [];
      // let tabHeads = new Division(this); // Tab的头部
      this.tabHeaders = new Division(this);
      this.tabHeaders.setAttrName('tab-headers');
      this.currentTabNameInput = new Input(this); // 设置当前Tab名字
      this.currentTabNameInput.propObj = { // 修改Tab名称Input的样式
        styleObj: {
          width: '180px',
          position: 'absolute',
          lineHeight: '26px',
          top: '10px',
          left: '200px',
          borderRadius: '4px;',
          border: '2px solid rgb(220, 223, 230)',
          outline: 'none',
        },
        attrObj: {
          type: 'text',
          placeholder: '请点击对应的Tab修改名称',
        }
      };

      this.currentTabNameInputLabel = new Span(this);
      let tempTextNode = new WebTextNode(this, '点击Tab修改名称:');
      this.currentTabNameInputLabel.setStyleObj({ // 修改Tab名称Label的样式
        position: 'absolute',
        top: '10px',
        left: '90px',
        paddingTop: '5px',
        fontSize: '13px',
      });
      this.currentTabNameInputLabel.addChild(tempTextNode);

      // 修改Tab名称按钮
      let btnTextNode = new WebTextNode(this, '确定');
      this.setTabNameButton = new Button(this);
      this.setTabNameButton.setStyleObj({   // 修改Tab名称确认Button的样式
        position: 'absolute',
        top: '10px',
        left: '400px',
        fontSize: '12px',
        borderRadius: '4px;',
        border: '1px solid rgb(220, 223, 230)'
      });

      this.setTabNameButton.clearChildNodes();
      this.setTabNameButton.addChild(btnTextNode);

      for (let i = 0; i < tabCount; i++) {
        let tempPage = new WebPage(this); // 控件画板

        // 循环添加tempPage，但只有第一个设置为显示，其余为display:none
        if (i === 0) {
          tempPage.setStyleObj({  // WebPage的样式
            display: 'block',
            marginTop: '65px',
            maxHeight: 'calc(100vh - 160px)',
            padding: '50px 4px 4px 4px',
          });
        } else {
          tempPage.setStyleObj({  // WebPage的样式
            display: 'none',
            marginTop: '65px',
            maxHeight: 'calc(100vh - 160px)',
            padding: '50px 4px 4px 4px',
          });
        }

        let tempdiv = new Division(this);
        let leftMargin = (150 * i) + 'px';
        let borderRadius = '0';
        if (i === 0) {
          borderRadius = '4px 0 0 0';
        } else if (i === 1) {
          leftMargin = (150 * i) + 'px';
        } else if (i === tabCount - 1) {
          leftMargin = (150 * i) + 'px';
          borderRadius = '0 4px 0 0';
        } else {
          leftMargin = (150 * i) + 'px';
        }
        tempdiv.setStyleObj({ // Tab页头部的样式
          height: '38px',
          width: '150px',
          overflowWrap: 'break-word',
          overflow: 'hidden',
          backgroundColor: 'rgb(243, 249, 255)', // #f6f5ec
          borderRadius: borderRadius,
          border: '1px solid rgb(220, 223, 230)',
          fontSize: '14px',
          textAlign: 'center',
          paddingTop: '10px',
          zIndex: 900,
          position: 'absolute',
          left: leftMargin,
        });
        let textNode = new WebTextNode(this, 'tab头部' + (i + 1));
        tempdiv.addChild(textNode);
        this.tabHeaders.addChild(tempdiv);

        this.tabHeaders.setStyleObj({ // 整个tab头部样式
          width: '93%',
          height: '50px',
          position: 'absolute',
          overflow: 'auto',
          overflowY: 'hidden',
          margin: '0 5mm',
          top: '65px',
          backgroundColor: '#fff',
        });

        tabWebPages.push(tempPage);

      }

      this.allPages = tabWebPages;
      this.childNodes = this.allPages;
      // todo 这里写的有问题，会把元素加载到childNodes中。
      this.addChild(this.currentTabNameInputLabel);
      this.addChild(this.currentTabNameInput);
      this.addChild(this.setTabNameButton);
      this.addChild(this.tabHeaders);

      this.defaultPage = this.allPages[0];
      this.currentPage = this.allPages[0];
      this.editor.currentPage = this.allPages[0];
    } else { // 停用了Tab
      this.allPages = [new WebPage(this)];
      this.defaultPage = this.allPages[0];
      this.currentPage = this.allPages[0];
      this.editor.currentPage = this.allPages[0];
    }
    this.childNodes = this.allPages;
    this.render();
    // console.log('this.childNodes:', this.childNodes);
    this.initEvents();
  }

  initEvents(): void {
    this.events.push(
      fromEvent(this.dom, 'click').subscribe((e) => {
        // console.log(this.dom, 'this.dom.lastChild.childNodes');
        // console.log(this.tabHeaders.childNodes, 'this.tabHeaders.childNodes');
        // console.log(this.allPages, 'this.allPages');
        // console.log('e target is ', e.target);
        if (e.target === this.dom) { // 选中非控件部位，取消选中控件。
          this.editor.setSelectedControl(null);
        }
      })
    );

    this.events.push(
      fromEvent(this.setTabNameButton.dom, 'click').subscribe((e) => {
        console.log('this.input.dom.value is ', this.currentTabNameInput.dom.value);
        console.log('this.currentHeaderElement', this.currentHeaderElement);
        if (this.currentHeaderElement) {
          this.currentHeaderElement.innerHTML = this.currentTabNameInput.dom.value;
        } else {
          // this.currentHeaderElement = this.tabHeaders.dom.firstElementChild as HTMLElement;
          // this.currentHeaderElement.innerHTML = this.currentTabNameInput.dom.value;
          alert('请先点击对应的Tab.');
        }
        console.log('333333');
        e.stopPropagation();
      }),
    );

    this.events.push(
      fromEvent(this.tabHeaders.dom, 'click').subscribe((e) => {
        console.log('你点击了我', e.target);
        console.log('你点击了我e.currentTarget', e.currentTarget);
        // console.log('this.allPages', this.allPages);
        let index = Array.from(this.tabHeaders.dom.childNodes).indexOf(e.target as ChildNode);
        if (index === -1) {
          return;
        }
        if (this.allPages.length > 0) {
          this.editor.currentPage.setStyleObj({
            display: 'none'
          });
        } else {
          this.editor.currentPage.setStyleObj({
            display: 'block'
          });
        }

        if (e.target != null) {
          // let elementTarget = e.target as HTMLElement;
          if (this.currentHeaderElement) {
            this.currentHeaderElement.style.backgroundColor = 'rgb(243, 249, 255)';
            this.currentHeaderElement.style.borderBottom = '1px solid rgb(220, 223, 230)';
          }
          this.currentHeaderElement = e.target as HTMLElement;
          this.currentHeaderElement.style.backgroundColor = 'white';
          this.currentHeaderElement.style.borderBottom = 'none';

          this.currentTabNameInput.setValue(this.currentHeaderElement.innerHTML);
          console.log('this.currentPage', this.currentPage);
          if (index > -1) {
            let tempCurrentPage = this.allPages[index];
            tempCurrentPage.setStyleObj({
              display: 'block'
            });
            this.editor.currentPage = tempCurrentPage;
          }
        }
        e.stopPropagation();
      })
    );
  }
}
